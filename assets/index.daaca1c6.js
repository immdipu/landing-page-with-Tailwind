(function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const o of document.querySelectorAll('link[rel="modulepreload"]')) a(o); new MutationObserver(o => { for (const r of o) if (r.type === "childList") for (const l of r.addedNodes) l.tagName === "LINK" && l.rel === "modulepreload" && a(l) }).observe(document, { childList: !0, subtree: !0 }); function c(o) { const r = {}; return o.integrity && (r.integrity = o.integrity), o.referrerpolicy && (r.referrerPolicy = o.referrerpolicy), o.crossorigin === "use-credentials" ? r.credentials = "include" : o.crossorigin === "anonymous" ? r.credentials = "omit" : r.credentials = "same-origin", r } function a(o) { if (o.ep) return; o.ep = !0; const r = c(o); fetch(o.href, r) } })(); document.querySelector(".SliderContainer"); const u = document.querySelector(".leftArrow"), f = document.querySelector(".rightArrow"), m = document.querySelector(".dotContainer"), i = document.querySelectorAll(".slides"), y = document.querySelectorAll(".section"); i.forEach((t, e) => t.style.transform = `translateX(${100 * e}%)`); let n = 0; let maxSlide = i.length; const d = function (t) { i.forEach((e, c) => e.style.transform = `translateX(${100 * (c - t)}%)`) }, h = function () { n === maxSlide - 1 ? n = 0 : n++, d(n), s(n) }, v = function () { n === 0 ? n = maxSlide - 1 : n--, d(n), s(n) }; u.addEventListener("click", v); f.addEventListener("click", h); const S = function () { i.forEach((t, e) => m.insertAdjacentHTML("beforeend", ` <div data-slide="${e}" class="w-[13px]  dot h-[13px] bg-zinc-400 rounded-full activedot"></div>`)) }; S(); const s = function (t) { document.querySelectorAll(".dot").forEach(e => e.classList.remove("activedot")), document.querySelector(`.dot[data-slide="${t}"]`).classList.add("activedot") }; document.querySelectorAll(".dot").forEach(function (t) { t.addEventListener("click", function () { const e = t.dataset.slide; d(e), s(e) }) }); s(0); const g = function (t, e) { const [c] = t; !c.isIntersecting || (c.target.classList.remove("hidde"), e.unobserve(c.target)) }, p = new IntersectionObserver(g, { root: null, threshold: .03 }); y.forEach(function (t) { p.observe(t), t.classList.add("hidde") });
